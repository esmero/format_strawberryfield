<?php
/**
 * @file
 * Contains formater_strawberryfield.module.
 */

use Drupal\format_strawberryfield\Controller\WebAnnotationController;
use Drupal\node\NodeInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityDisplayInterface;
use Drupal\Core\Form\FormStateInterface;
use Swaggest\JsonDiff\JsonDiff;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\cache\CachePluginBase;
use Drupal\Core\Cache\Cache;

/**
 * Implements hook_page_attachments().
 *
 * Adds the iiif_openseadragon js library.
 */
function format_strawberryfield_page_attachments(array &$page) {
  /*if (!\Drupal::currentUser()->hasPermission('access search')) {
      return;
  @TODO discuss if we need to limit viewers to a particular role?
  Could be nice to allow annotations as a drop replacement
  of the same viewer dependant on the rol
  }*/

  // Remove IIIF on admin routes, why make peoples life more complicated
  /* if (\Drupal::service('router.admin_context')->isAdminRoute()) {
      return;
  }*/
  if (\Drupal::currentUser()->hasPermission('view strawberryfield webannotation')) {
      $page['#attached']['library'][] = 'format_strawberryfield/iiif_flavor_annotations_strawberry';
  }

  $page['#attached']['library'][] = 'format_strawberryfield/lazyload_strawberry';
  $page['#attached']['library'][] = 'core/jquery';
  $page['#attached']['library'][] = 'core/drupal.dialog.ajax';
  $page['#attached']['library'][] = 'core/drupal.ajax';
}

/**
 * Implements hook_form_FORM_ID_alter() for node_form.
 */
function format_strawberryfield_form_node_form_alter(&$form, FormStateInterface $form_state) {
  // Deal with Possible Addded Annotations.
  if ($form_state->get('hadAnnotations')) {
    $count = $form_state->get('hadAnnotations');

    $form['annotations'] = [
      '#type' => 'fieldset',
      '#weigth ' => -1000,
      '#title' => t('Unsaved Web Annotation Changes'),
    ];
    $form['annotations']['container'] = [
      '#type' => 'container',
      '#markup' =>  \Drupal::translation()->formatPlural($count,
        'You have one unsaved Annotation/Modification to an Annotation for this Digital Object',
        'You have @count unsaved Annotation/Modification for this Digital Object'
      )
    ];

    $form['annotations']['markup'] = [
      '#type' => 'markup',
      '#markup' => 'To persist them <em>save</em> the Object or continue editing by going back to <em>View</em>. '
    ];
    $form['annotations']['markup2'] = [
      '#type' => 'markup',
      '#markup' => 'Pressing <em>Discard</em> will keep the original ones untouched and will reload this page.'
    ];
    // We may had the need to reload the page since we are overriding the SBF
    // field value on format_strawberryfield_node_prepare_form
    // @TODO maybe someone has a better idea on how to avoid/force reloading?
    // The simples way really is to redirect the user back here.

    $form['annotations']['discard'] = [
      '#prefix' => '<div>',
      '#suffix' => '</div>',
      '#type' => 'button',
      '#value' => t('Discard'),
      '#ajax' => [
        'callback' => 'Drupal\format_strawberryfield\Controller\WebAnnotationController::deleteKeyStoreAjaxCallback',
        'event' => 'click',
        'progress' => [
          'type' => 'throbber',
          'message' => 'Restoring original Web Annotations ',
        ],
      ]
    ];
  }
}

/**
 * Implements hook_entity_view_mode_alter().
 */
function format_strawberryfield_entity_view_mode_alter(&$view_mode, Drupal\Core\Entity\EntityInterface $entity, $context) {
  if ($entity->getEntityTypeId() != 'node') {
    return;
  }
  if ($view_mode != 'full') {
    return;
  }
  $view_mode = \Drupal::service('format_strawberryfield.view_mode_resolver')->get($entity);

  // To be determined if we want to be dependat on ds module or not
  // if so we really want to act on this alter and not the general one.
  /* \Drupal::moduleHandler()->alter('ds_switch_view_mode', $view_mode, $original_view_mode, $entity); */

}

/**
 * Implements hook_theme().
 */
function format_strawberryfield_theme() {
  return [
    'format_strawberryfield_pdfs' => [
      'variables' => [
        'item' => NULL
      ],
      'template' => 'format-strawberryfield-pdfs'
    ],
  ];
}

/**
 * Implements hook__file_mimetype_mapping_alter().
 */
function format_strawberryfield_file_mimetype_mapping_alter(&$mapping) {
  // Add relevant Repository Mimetypes missing from D8
  $mapping['mimetypes']['obj_model_mimetype'] = 'model/obj';
  $mapping['mimetypes']['webarchive_mimetype'] = 'application/warc';
  $mapping['mimetypes']['ob_material_mimetype'] = 'model/mtl';
  $mapping['extensions']['obj'] = 'obj_model_mimetype';
  $mapping['extensions']['warc'] = 'webarchive_mimetype';
  $mapping['extensions']['wacz'] = 'webarchive_mimetype';
  $mapping['extensions']['warc.gz'] = 'webarchive_mimetype';
  $mapping['extensions']['mtl'] = 'ob_material_mimetype';
  // @see https://www.iana.org/assignments/media-types/media-types.xhtml

}

/**
 * Implements hook_ENTITY_TYPE_prepare_form() for node entities.
 */
function format_strawberryfield_node_prepare_form(NodeInterface $entity, $operation, FormStateInterface $form_state) {
  // Prepare defaults for the add/edit form.
  // Because of Form Modes we can not only depend on "edit". But more likely on

  if (($operation == 'delete' || $operation == 'quick_node_clone' || $entity->isNew())) {
    return;
  }

  $account = \Drupal::currentUser();
  if (($sbf_fields = \Drupal::service('strawberryfield.utility')->bearsStrawberryfield($entity)) &&
    $account->hasPermission('add strawberryfield webannotation')) {
    foreach ($sbf_fields as $field_name) {
      /* @var $field \Drupal\Core\Field\FieldItemInterface */
      $field = $entity->get($field_name);
      /* @var \Drupal\strawberryfield\Field\StrawberryFieldItemList $field */
      foreach ($field->getIterator() as $delta => $itemfield) {
        /** @var $itemfield \Drupal\strawberryfield\Plugin\Field\FieldType\StrawberryFieldItem */
        $fullvalues = $itemfield->provideDecoded(TRUE);
        /* @var $tempstore \Drupal\Core\TempStore\PrivateTempStore */
        $tempstore = \Drupal::service('tempstore.private')->get('webannotation');
        $keystoreid = WebAnnotationController::getTempStoreKeyName(
          $field_name,
          $delta,
          $entity->uuid()
        );
        $annotation_values = $tempstore->get($keystoreid);
        // If not present escape the loop. Needs to be EXACT NULL.
        if ($annotation_values === NULL) {
          break 2;
        }
        $annotation_values = is_array($annotation_values) ? $annotation_values : [];
        // This covers:
        /*
         * We got more than 0 annotations from Cache and we also have saved ones and both are not equal OR (UPDATE)
         * We got more than 0 annotations from Cache and we have no saved nor the supporting structure to save (NEW)
         * None from Cache (but cache exists) and we also have saved ones (REMOVE ALL)
         */
        if (
          (count($annotation_values) && isset($fullvalues['ap:annotationCollection']) && $annotation_values != $fullvalues['ap:annotationCollection']) ||
          (count($annotation_values) && !isset($fullvalues['ap:annotationCollection'])) ||
          (count($annotation_values) == 0 && isset($fullvalues['ap:annotationCollection']))
        ) {
          // Super handy! Potential for the future: JSON UNDO!!
          $fullvalues['ap:annotationCollection'] = isset($fullvalues['ap:annotationCollection']) ? $fullvalues['ap:annotationCollection'] : [];
          $r = new JsonDiff(
            $fullvalues['ap:annotationCollection'],
            $annotation_values,
            JsonDiff::REARRANGE_ARRAYS + JsonDiff::SKIP_JSON_MERGE_PATCH
          );
          // We just keep track of the changes. If none! Then we do not set
          // the formstate flag.
          if ($r->getDiffCnt() > 0) {
            $fullvalues['ap:annotationCollection'] = $annotation_values;
            $entity->{$field_name}[0]->setMainValueFromArray($fullvalues);
            $form_state->set('hadAnnotations', $r->getDiffCnt());
          }
          break 2;

        }
        if (!is_array($fullvalues)) {
          break;
        }

      }
    }
  }
}

/**
 * Implements hook_css_alter().
 */
function format_strawberryfield_css_alter(&$css) {
  // Remove the stable.theme's off-canvas CSS reset for metadata display edit
  // routes, otherwise CodeMirror doesn't display properly.
  // @TODO Reevaluate for Drupal 9.
  // @see https://www.drupal.org/project/drupal/issues/2826722

  if (\Drupal::routeMatch()->getRouteName() !== 'entity.metadatadisplay_entity.edit_form') {
    return;
  }
  foreach ($css as $key => $item) {
    // @see 'core/misc/dialog/off-canvas
    // @see core/themes/stable/css/core/dialog/off-canvas
    if (strpos($key, '/off-canvas.') !== FALSE) {
      unset($css[$key]);
    }
  }
}


/**
 * Implements hook_contextual_links_alter().
 *
 * Converts one Metadata Display Entity Contextual Link with metadata to multiple
 * Links with propert Titles.
 *
 */
function format_strawberryfield_contextual_links_alter(array &$links, $group, array $route_parameters) {

  if ($group == 'metadatadisplay_entity') {
    $entities = [];
    $other_entities = [];
    $entities[] = $route_parameters['metadatadisplay_entity'] ?? NULL;
    if (isset($links['metadatadisplay.page_edit']['metadata']['metadatadisplay_entity_ids']) &&
      is_array($links['metadatadisplay.page_edit']['metadata']['metadatadisplay_entity_ids'])) {
      $other_entities = $links['metadatadisplay.page_edit']['metadata']['metadatadisplay_entity_ids'];
    }
    $combined_entities = array_unique(array_merge($entities, $other_entities));
    $metadata_display_entities = \Drupal::entityTypeManager()
      ->getStorage('metadatadisplay_entity')
      ->loadMultiple($combined_entities);
    $weight = 0;
    foreach ($metadata_display_entities as $entity) {
      $weight++;
      $links['metadatadisplay.page_edit.' . $entity->id()] = $links['metadatadisplay.page_edit'];
      $links['metadatadisplay.page_edit.' . $entity->id()]['route_parameters']['metadatadisplay_entity'] = $entity->id();
      $links['metadatadisplay.page_edit.' . $entity->id()]['title'] = t('Edit Metadatadata Display: @label',
        ['@label' => $entity->label()]);
      $links['metadatadisplay.page_edit.' . $entity->id()]['weight'] = $weight;
    }
    // After building new link entries Delete the original One.
    unset($links['metadatadisplay.page_edit']);
  }
}


/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function format_strawberryfield_node_view_alter(&$build, EntityInterface $entity, EntityDisplayInterface $display) {
    $resolved_embargo = \Drupal::service('format_strawberryfield.embargo_resolver')->getResolvedEmbargoesByUUid($entity->uuid());
    if (($resolved_embargo[3] ?? TRUE) == FALSE) {
      $build['#cache']['max-age'] = 0;
    }
}

/**
 * Implements hook_entity_view_alter().
 */
function format_strawberryfield_entity_view_alter(&$build, EntityInterface $entity, EntityDisplayInterface $display) {

  if ($sbf_fields = \Drupal::service('strawberryfield.utility')->bearsStrawberryfield($entity)) {
    $display_array = $display->toArray();
    // First we get main field/that has a SBF
    foreach ($sbf_fields as $sbf_field_name) {
      if (isset($display_array['content'][$sbf_field_name]['settings']['metadatadisplayentity_uuid'])) {
        $uuid = $display_array['content'][$sbf_field_name]['settings']['metadatadisplayentity_uuid'];
        $entities = \Drupal::entityTypeManager()
          ->getStorage('metadatadisplay_entity')
          ->loadByProperties(['uuid' => $uuid]);
        $entity = reset($entities);
        if ($entity) {
          $build['#contextual_links']['metadatadisplay_entity'] = [
            'route_parameters' => ['metadatadisplay_entity' => $entity->id()],
          ];
        }
      }
    }
    // Now we deal with in memory DS copy fields
    if (isset($display_array['third_party_settings']['ds']['fields'])) {
      foreach ($display_array['third_party_settings']['ds']['fields'] as $candidate_field) {
        // The list of formatters (static here, we may want to make this a method in a service
        // or add a Field Formatter annotation in the future?) that use metadatadisplay_entities
        if (in_array($candidate_field['formatter'],
          [
            'strawberry_metadata_formatter',
            'strawberry_mirador_formatter',
            'strawberry_paged_formatter',
            'strawberry_map_formatter'
          ])) {
          $uuid = $candidate_field['settings']['formatter']['metadatadisplayentity_uuid'] ?? NULL;
          if ($uuid) {
            $entities = \Drupal::entityTypeManager()
              ->getStorage('metadatadisplay_entity')
              ->loadByProperties(['uuid' => $uuid]);
            $entity = reset($entities);
            if ($entity) {
              if (isset($build['#contextual_links']['metadatadisplay_entity'])) {
                $build['#contextual_links']['metadatadisplay_entity']['metadata']['metadatadisplay_entity_ids'][] = (int) $entity->id();
              }
              else {
                $build['#contextual_links']['metadatadisplay_entity'] = [
                  'route_parameters' => ['metadatadisplay_entity' => (int) $entity->id()],
                ];
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 *
 * We push our hooks to the end so we have all DS processed data available.

 */
function format_strawberryfield_module_implements_alter(&$implementations, $hook) {
  if (($hook == 'entity_view_alter') || ($hook == 'node_view_alter')) {
    $group = $implementations['format_strawberryfield'] ?? NULL;
    if ($group !== NULL) {
      unset($implementations['format_strawberryfield']);
      $implementations['format_strawberryfield'] = $group;
    }
  }
}

/**
 * Implements hook_cron().
 */
function format_strawberryfield_cron() {
  $now = \Drupal::requestStack()->getCurrentRequest()->server->get('REQUEST_TIME');
  $timesincerun = $now - \Drupal::state()->get('system.cron_last');
  if ($timesincerun/60/60/24 > 7) {
    \Drupal\Core\Cache\Cache::invalidateTags(['format_strawberryfield:all_embargo']);
  }
  else {
    $dayssince = ceil($timesincerun/60/60/24);
    $current_time = time();
    for ($i = 0; $i < $dayssince; $i++) {
      $date_to_invalidate =  date('Y-m-d', $current_time - 60 * 60 * 24 * $i);
      \Drupal\Core\Cache\Cache::invalidateTags(['format_strawberryfield:embargo:'.$date_to_invalidate]);
    }
  }

}

/**
 * Provides custom PHP error handling when processing ajax previews.
 *
 * Throws exceptions for E_USER_WARNING and E_USER_ERROR only
 * to be caught by
 * \Drupal\format_strawberryfield\MetadataDisplayForm::ajaxPreview().
 * All other errors are passed back to Drupal's error handler.
 *
 * @param int $error_level
 *   The level of the error raised.
 * @param string $message
 *   The error message.
 * @param string $filename
 *   (optional) The filename that the error was raised in.
 * @param string $line
 *   (optional) The line number the error was raised at.
 * @param array $context
 *   (optional) An array that points to the active symbol table at the point the
 *   error occurred.
 *
 * @throws \ErrorException
 *   Throw ErrorException for E_USER_WARNING and E_USER_ERROR only.
 *
 * @see \Drupal\format_strawberryfield\MetadataDisplayForm::ajaxPreview()
 */
function _format_strawberryfield_metadata_preview_error_handler($error_level, $message, $filename = NULL, $line = NULL, $context = NULL) {
    switch($error_level)
    {
      case E_USER_WARNING:
      case E_USER_ERROR:
        _drupal_error_handler($error_level, $message, $filename, $line, $context);
        throw new ErrorException($message, $error_level, 0, $filename, $line);
      default:
        _drupal_error_handler($error_level, $message, $filename, $line, $context);
        break;
    }
}

/**
 *
 * implements hook_views_pre_build
 *
 * Used to kill caching if we are using our custom ado_access ADO/NODE
 * argument validator.
 *
 * @param \Drupal\views\ViewExecutable $view
 *
 * @return void
 */
function format_strawberryfield_views_pre_build(ViewExecutable $view) {
  foreach ($view->argument ?? [] as $argument) {
    if ($argument instanceof Drupal\node\Plugin\views\argument\Nid) {
      if ($argument->options['specify_validation'] ?? FALSE) {
        if ($argument->options['validate']['type'] ?? NULL == 'ado_access' && ($argument->options['validate_options']['operation'] ?? NULL) == "view_embargoed") {
          // We have to kill the cache if we are evaluating ADO & Embargo accesss arguments
          // Issue is "when" evaluation is FALSE, the Views returns (*empty?) before we have the chance
          // To alter it post_render. Performance v/s Flexibility/Consistency. The later one wins here.
          $view->element['#cache']['max-age'] = 0;
          $view->display_handler->overrideOption('cache', [
            'type' => 'time',
            'options' => [
              'results_lifespan' => '0',
              'output_lifespan' => '0',
            ],
          ]);
        }
        break;
      }
    }
  }
}

/**
 *  implements hook_views_post_render
 *
 *  Really only applies when the ado_access argument decides the user can
 *  See the NODE (not embargoed). In a case of not, we don't run this at all.
 *  And we simply set caching to none. The most common case is IP address
 *  That varies of course per call.
 *
 * @param \Drupal\views\ViewExecutable $view
 * @param $output
 * @param \Drupal\views\Plugin\views\cache\CachePluginBase $cache
 *
 * @return void
 */
function format_strawberryfield_views_post_render(ViewExecutable $view, &$output, CachePluginBase $cache) {
  $view =  $view;
  foreach ($view->argument ?? [] as $argument) {
    if($argument instanceof Drupal\node\Plugin\views\argument\Nid) {
      if ($argument->options['specify_validation'] ?? FALSE) {
        if ($argument->options['validate']['type'] ?? NULL == 'ado_access' && ($argument->options['validate_options']['operation'] ?? NULL) == "view_embargoed") {
          $embargo_tags = [];
          $embargo_context = [];
          foreach ($argument->value as $value) {
            $embargo_info = \Drupal::service('format_strawberryfield.embargo_resolver')->getResolvedEmbargoesByNiD($value);
            if (is_array($embargo_info)) {
              $embargo_tags[] = 'format_strawberryfield:all_embargo';
              if ($embargo_info[1]) {
                $embargo_tags[] = 'format_strawberryfield:embargo:'
                  . $embargo_info[1];
              }
              if ($embargo_info[2]) {
                $embargo_context[] = 'ip';
              }
            }
            if (($embargo_info[3] ?? TRUE) == FALSE) {
              $view->element['#cache']['max-age'] = 0;
              $output['#cache']['max-age'] = 0;
            }
          }
          $view->element['#cache']['max-age'] = 0;
          $output['#cache']['max-age'] = 0;
          $output['#cache']['contexts'] = Cache::mergeContexts($output['#cache']['contexts'] ?? [], ['user.permissions', 'user.roles'], $embargo_context);
          $view->element['#cache']['contexts'] = Cache::mergeContexts($view->element['#cache']['contexts'] ?? [], ['user.permissions', 'user.roles'], $embargo_context);
          $output['#cache']['tags'] = Cache::mergeTags($output['#cache']['tags'] ?? [], $embargo_tags,['config:format_strawberryfield.embargo_settings']);
          $view->element['#cache']['tags'] = Cache::mergeTags($view->element['#cache']['tags'] ?? [], $embargo_tags,['config:format_strawberryfield.embargo_settings']);
        }
      }
    }
  }
}
