<?php
/**
 * @file
 * Contains formater_strawberryfield_views.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Template\Attribute;
use Drupal\Component\Utility\Html;
use Drupal\Core\Utility\Error as ErrorAlias;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\Core\Block\BlockPluginInterface;
use Drupal\search_api\Entity\Index;
/**
 * Implements hook_theme().
 */
function format_strawberryfield_views_theme($existing, $type, $theme, $path) {
  return [
    'format_strawberryfield_views_leaflet' => [
      'variables' => [],
      'template' => 'format-strawberryfield-views-leaflet',
      'render element' => 'elements',
    ],
  ];
}
/**
 * Prepares variables for the Format Strawberry Fields Leaflet Views style template.
 *
 * Default template: format-strawberryfield-views-leaflet.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - view: A ViewExecutable object.
 *   - rows: The row data that will contain Drupal Entities.
 *   - options: The Views/Views Style configured option.
 */
function template_preprocess_format_strawberryfield_views_leaflet(array &$variables) {
  $view = $variables['view'];
  $variables['view']->style_plugin->options;
  $geojsons = [];
  $geojsonsgrouped = [];
  if (!empty($variables['options']['leaflet_options']['metadataexposeentity_source'])) {
    /* @var $entity \Drupal\format_strawberryfield\Entity\MetadataExposeConfigEntity */
    $entity = \Drupal::entityTypeManager()->getStorage(
      'metadataexpose_entity'
    )->load(
      $variables['options']['leaflet_options']['metadataexposeentity_source']
    );
    if ($entity) {
      foreach ($variables['rows']['ungrouped'] ?? [] as $views_result_entity_uuid) {
        $url = $entity->getUrlForItemFromNodeUUID(
          $views_result_entity_uuid, TRUE
        );
        $geojsons[$views_result_entity_uuid] = $url;
      }
      foreach ($variables['rows']['grouped'] ?? [] as $group => $views_result_entity_uuids) {
        foreach ($views_result_entity_uuids as $views_result_entity_uuid) {
          $url = $entity->getUrlForItemFromNodeUUID(
            $views_result_entity_uuid, TRUE
          );
          $geojsonsgrouped[$group][] = $url;
        }
      }
    }
  }
  // Tried base64 but that expands 3 bytes into 4. Means it grows.
  $geojsons = json_encode($geojsons);
  $geojsonsgrouped = json_encode($geojsonsgrouped);
  $max_width = $variables['options']['leaflet_options']['max_width'];
  $max_width_css = empty($max_width) || $max_width == 0 ? '100%' : $max_width .'px';
  $max_height = $variables['options']['leaflet_options']['max_height'];

  // get the URL to our Metadata Expose Endpoint, we will get a string here.
  // Set a unique id attribute for the timeline embed div.  Also set a width and
  // height for the div.  This is required for proper styling of the timeline.
  // See https://timeline.knightlab.com/docs/instantiate-a-timeline.html.
  $htmlid = Html::getId('format_strawberryfield_views_leaflet_' . $view->storage->id() . '_' . $view->current_display);
  $variables['#attached']['drupalSettings']['format_strawberryfield_views']['leaflet'][$htmlid]['geojsonurls'] = $geojsons;
  $variables['#attached']['drupalSettings']['format_strawberryfield_views']['leaflet'][$htmlid]['geojsongroupedurls'] = $geojsonsgrouped;
  $variables['#attached']['drupalSettings']['format_strawberryfield_views']['leaflet'][$htmlid]['geojsonother'] =  [];
  $variables['#attached']['drupalSettings']['format_strawberryfield_views']['leaflet'][$htmlid]['width'] = $max_width_css;
  $variables['#attached']['drupalSettings']['format_strawberryfield_views']['leaflet'][$htmlid]['height'] = max(
    $max_height,
    480
  );
  $variables['#attached']['drupalSettings']['format_strawberryfield_views']['leaflet'][$htmlid]['maxzoom'] =$variables['options']['leaflet_options']['max_zoom'];
  $variables['#attached']['drupalSettings']['format_strawberryfield_views']['leaflet'][$htmlid]['minzoom'] =$variables['options']['leaflet_options']['min_zoom'];
  $variables['#attached']['drupalSettings']['format_strawberryfield_views']['leaflet'][$htmlid]['initialzoom'] =$variables['options']['leaflet_options']['initial_zoom'];

  $variables['#attached']['drupalSettings']['format_strawberryfield_views']['leaflet'][$htmlid]['tilemap_url'] =$variables['options']['leaflet_options']['tilemap_url'];
  $variables['#attached']['drupalSettings']['format_strawberryfield_views']['leaflet'][$htmlid]['tilemap_attribution'] =$variables['options']['leaflet_options']['tilemap_attribution'];
  $variables['#attached']['library'][] = 'format_strawberryfield_views/leaflet_strawberry_views';


  $style = 'width: ' . $max_width_css . '; height: ' . $max_height . ';';
  $variables['attributes'] = new Attribute(['id' => $htmlid, 'style' => $style, 'data-iiif-infojson' => '',  'class' => [
    'strawberry-leaflet-views-item',
    'leafletViewer',
    'field-iiif',
    'container',
  ]
  ]);
  unset($variables['rows']);
}

/**
 * Alter the query before it is executed.
 *
 * @param \Drupal\views\ViewExecutable $view
 *   The view object about to be processed.
 * @param \Drupal\views\Plugin\views\query\QueryPluginBase $query
 *   The query plugin object for the query.
 *
 * @see hook_views_query_substitutions()
 * @see \Drupal\views\Plugin\views\query\Sql
 */
function format_strawberryfield_views_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  // Remove HOCR highlighter in the presence of a Views
  // Leaflet Display to avoid Solr errors
  if ($query->getPluginId() == 'search_api_query' && $view->getStyle()->getPluginId() == 'format_strawberryfield_views_leaflet') {
    $query->setOption('ocr_highlight', 'off');
  }
}

/**
 * Implements hook_block_view_BASE_BLOCK_ID_alter() for 'views_exposed_filter_block_sbf'.
 */
function format_strawberryfield_views_block_view_views_exposed_filter_block_sbf_alter(array &$build, BlockPluginInterface $block) {
  if ($block->getBaseId() == 'views_exposed_filter_block_sbf') {
    $build['#pre_render'][] = 'Drupal\format_strawberryfield_views\Plugin\Block\ViewsExposedFilterBlockModal::preRender';
  }
}

/**
 * Implements hook_block_view_BASE_BLOCK_ID_alter() for 'views_exposed_filter_block_sbf'.
 */
function format_strawberryfield_views_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'views_exposed_form') {
    if (isset($form['actions']['submit'])) {
      $form['actions']['#attached']['library'][] = 'format_strawberryfield_views/advanced-search-default-submit';
      $form['actions']['submit']['#attributes']['tabindex'] = 1;
      $form['actions']['submit']['#attributes']['data-default-submit'] = '';
      // Needed when multiple buttons are on the same form, by default the name is empty
      // making \Drupal\Core\Form\FormBuilder::buttonWasClicked fail!
      $form['actions']['submit']['#name'] = 'op';
    }
    foreach ($form as $key => $value) {
      if (is_array($value) && isset ($value['#group']) && isset($value['#type']) && $value['#group'] == 'actions' && ($value['#type'] == 'submit' || $value['#type'] == 'button' || $value['#type'] == 'link')) {
        $form['actions'][$key] = $value;
        unset($form[$key]);
      }
    }
  }
}

/**
 * Implements hook_views_data_alter().
 */
function format_strawberryfield_views_views_data_alter(array &$data) {
  //@see search_api_views_data()
  /** @var \Drupal\search_api\IndexInterface $index */
  foreach (Index::loadMultiple() as $index) {
    try {
      $key = 'search_api_index_' . $index->id();
      $table = &$data[$key];
      $advanced_fulltext_field = _search_api_views_find_field_alias('sbf_advanced_search_api_fulltext', $table);
      $table[$advanced_fulltext_field] = [
        'title'  => t('Advanced Fulltext search'),
        'group' => t('Search'),
        'help' => t('Search several or all fulltext fields at once allowing also multiple operator separated entries'),
        'filter' => [
          'title' => t('Advanced Fulltext search'),
          'field' => 'id',
          'id'    => 'sbf_advanced_search_api_fulltext',
        ],
      ];
      if ($advanced_fulltext_field != 'sbf_advanced_search_api_fulltext') {
        $table[$advanced_fulltext_field]['real field'] = 'sbf_advanced_search_api_fulltext';
      }

      $sbf_join_field = _search_api_views_find_field_alias('sbf_flavors_join', $table);
      $table[$sbf_join_field] = [
        'title'  => t('Strawberry Flavor to Node Join'),
        'group' => t('Search'),
        'help' => t('Joins Strawberry Flavor Search API datasources (e.g OCR) to Nodes (ADO) when doing a Full Text Search.'),
        'filter' => [
          'title' => t('Strawberry Flavor to Node Join.'),
          'field' => 'id',
          'id'    => 'sbf_flavors_join',
        ],
      ];
      if ($sbf_join_field != 'sbf_flavors_join') {
        $table[$sbf_join_field]['real field'] = 'sbf_flavors_join';
      }

      // @TODO add also an argument ID if relationships are enabled to
      // $table[$advanced_fulltext_field]['argument']['id'] = 'sbf_advanced_search_api_fulltext';
      // Requires a special Argument Plugin. Not needed right now.

      $ado_filter = _search_api_views_find_field_alias('sbf_ado_filter', $table);
      $table[$ado_filter] = [
        'title'  => t('Similar ADO Filter (Experimental)'),
        'group' => t('Search'),
        'help' => t('Filters one or more Node Entity against Search API fields, resolving dynamically values for the input Node(s) using the destination Field property paths.'),
        'filter' => [
          'title' => t('Similar ADO Filter'),
          'field' => 'id',
          'id'    => 'sbf_ado_filter',
        ],
      ];
      if ($ado_filter != 'sbf_ado_filter') {
        $table[$ado_filter]['real field'] = 'sbf_ado_filter';
      }

      $sbf_ado_join_field = _search_api_views_find_field_alias('sbf_ado_join', $table);
      $table[$sbf_ado_join_field] = [
        'title'  => t('ADO(node) to ADO(node) Join'),
        'group' => t('Search'),
        'help' => t('Joins ADOs to ADOs when doing a Full Text Search.'),
        'filter' => [
          'title' => t('ADO(node) to ADO(node) Join'),
          'field' => 'id',
          'id'    => 'sbf_ado_join',
        ],
      ];
      if ($sbf_ado_join_field != 'sbf_ado_join') {
        $table[$sbf_ado_join_field]['real field'] = 'sbf_ado_join';
      }



    }
    catch (\Exception $e) {
      $args = [
        '%index' => $index->label(),
      ];
      ErrorAlias::logException('format_strawberryfield_views', $e, '%type while computing Views data for index %index: @message in %function (line %line of %file).', $args);
    }
  }
  return $data;
}

/**
 * Implements hook_library_info_alter().
 */
function format_strawberryfield_views_library_info_alter(&$libraries, $extension) {
  if ($extension === 'facets' && isset($libraries['drupal.facets.views-ajax'])) {
    $libraries['drupal.facets.views-ajax']['version'] = '1.x';
    $old_path = 'js';
    // Since the replaced library files are no longer located in a directory
    // relative to the original extension, specify an absolute path (relative
    // to DRUPAL_ROOT / base_path()) to the new location.
    $new_path = '/' . \Drupal::service('extension.list.module')
        ->getPath('format_strawberryfield_views') . '/js';
    $new_js = [];
    $replacements = [
      $old_path . '/facets-views-ajax.js' => $new_path . '/facets-views-ajax.js',
    ];
    foreach ($libraries['drupal.facets.views-ajax']['js'] as $source => $options) {
      if (isset($replacements[$source])) {
        $new_js[$replacements[$source]] = $options;
      }
      else {
        $new_js[$source] = $options;
      }
    }
    $libraries['drupal.facets.views-ajax']['js'] = $new_js;
    $libraries['drupal.facets.views-ajax']['dependencies'][] = 'format_strawberryfield_views/modal-exposed-form-views-ajax';
    $libraries['drupal.facets.views-ajax']['dependencies'][] = 'facets/drupal.facets.dropdown-widget';
    $libraries['drupal.facets.views-ajax']['dependencies'][] = 'facets/drupal.facets.link-widget';
    $libraries['drupal.facets.views-ajax']['dependencies'][] = 'facets/drupal.facets.checkbox-widget';
    array_unshift($libraries['drupal.facets.views-ajax']['dependencies'], 'core/views.ajax');
  }
}

/**
 * Implements hook_views_pre_render().
 */
function format_strawberryfield_views_views_pre_render(ViewExecutable $view) {
  $current_display = $view->current_display;
  $view_config = $view->storage->getDisplay($current_display);
  if (!empty($view_config['display_options']['display_extenders']['sbf_ajax_interactions'] ?? NULL) &&  !empty($view_config['display_options']['display_extenders']['sbf_ajax_interactions']['sbf_ajax_interactions_arguments'] ?? NULL)) {
    if ($view_config['display_options']['display_extenders']['sbf_ajax_interactions']) {
      $view->element['#attached']['library'][] = 'format_strawberryfield_views/view-ajax-interactions';
      $view->element['#attached']['drupalSettings']['sbf_ajax_interactions'][$view->dom_id] = $view_config['display_options']['display_extenders']['sbf_ajax_interactions']['sbf_ajax_interactions_arguments'];
    }
  }
}

function format_strawberryfield_views_page_attachments(array &$page) {
  $page['#attached']['library'][] = "format_strawberryfield_views/views-ajax-dynamic";
}

